<template>
  <div id="allpicker">
    <div v-if="content && content.length == 1">
      <div class="select" @click="showPicker">{{ selectedText[0] }}</div>
      <Picker @select="handleSelect(arguments)" :data="content" :selected-index="selectedIndex"
            ref="picker" :title="title" cancelTxt="取消" confirmTxt="确定"></Picker>
    </div>

    <div v-if="url">
      <div class="select" @click="showPicker">{{ selectedText[0] }}</div>
      <Picker @select="handleSelect(arguments)" :data="linkageData" :selected-index="selectedIndexCity"
            ref="picker" @change="handleChange" :title="title" cancelTxt="取消" confirmTxt="确定"></Picker>
    </div>
  </div>
</template>

<script>
import Picker from '@/components/Picker'
export default {
  name: 'AllPicker',
  components: {
    Picker
  },
  props: {
    content: {}, // 所有数据
    text: {
      default: '请选择'
    }, // 初始显示的值
    title: {}, // picker标题
    selected: {},
    index: {
      default: 0
    }, // 默认选项的索引
    sign: {},
    url: {} // json链接
  },
  data () {
    return {
      selectedText: [], // 外层显示
      selectedIndex: [0],
      selectedIndexCity: [0, 0],
      cdnDate: [] // cdn链接时的总数据
    }
  },
  mounted () {
    this.selectedText = [this.text]
    this.selectedIndex[0] = this.index
    if (this.url) {
      this.axios(this.url).then(res => {
        this.cdnDate = res.data
      })
    }
  },
  methods: {
    showPicker () {
      this.$refs.picker.setData(this.linkageData)
      this.$refs.picker.show()
    },
    handleSelect (args) {
      console.log(args)
      this.selectedText = args[2]
      this.$emit('update', [args[0][0], this.sign])
    },
    handleChange (i, newIndex) {
      console.log(i)
      console.log(newIndex)
      this.selectedIndexCity[1] = newIndex
      console.log(this.selectedIndexCity)
      this.linkageData[1] = this.cdnDate[newIndex].next
      // if (newIndex !== this.selectedIndexCity[i]) {
      //   for (let j = 2; j > i; j--) {
      //     this.selectedIndexCity.splice(j, 1, 0)
      //     this.$refs.picker.scrollTo(j, 0)
      //   }
      //   this.selectedIndexCity.splice(i, 1, newIndex)
      // }
    }
  },
  computed: {
    linkageData () {
      if (this.cdnDate.length > 0) {
        const provinces = this.cdnDate
        const cities = provinces[this.selectedIndexCity[0]].next
        return [provinces, cities]
      }
    }
  },
  watch: {
    linkageData () {
      console.log(22)
      this.$refs.picker.refresh()
    }
  }
}
</script>

<style scoped>

</style>
